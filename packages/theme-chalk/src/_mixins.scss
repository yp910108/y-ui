/* Break-points
 -------------------------- */
@mixin res($key, $map: $--breakpoints) {
  // 循环断点Map，如果存在则返回
  @if map-has-key($map, $key) {
    @media only screen and #{inspect(map-get($map, $key))} {
      @content;
    }
  } @else {
    @warn "Undefeined points: `#{$map}`";
  }
}

/* Scrollbar
 -------------------------- */
@mixin scroll-bar {
  $--scrollbar-thumb-background: #b4bccc;
  $--scrollbar-track-background: #fff;
  &::-webkit-scrollbar {
    z-index: 11;
    width: 6px;
    &:horizontal {
      height: 6px;
    }
    &-thumb {
      border-radius: 5px;
      width: 6px;
      background: $--scrollbar-thumb-background;
    }
    &-corner {
      background: $--scrollbar-track-background;
    }
    &-track {
      background: $--scrollbar-track-background;
      &-piece {
        background: $--scrollbar-track-background;
        width: 6px;
      }
    }
  }
}

/* BEM
 -------------------------- */
@mixin b($block) {
  $B: $namespace + '-' + $block !global;
  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector + '.' + $B + $element-separator + $unit + ','};
  }
  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ','};
  }
  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin utils-user-select($value) {
  -moz-user-select: $value;
  -webkit-user-select: $value;
  -ms-user-select: $value;
}

@mixin utils-clearfix {
  $selector: &;
  @at-root {
    #{$selector}:before,
    #{$selector}:after {
      content: '';
      display: table;
    }
    #{$selector}:after {
      clear: both;
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state } {
      @content;
    }
  }
}

@mixin pseudo($pseudo) {
  @at-root #{&}#{':#{$pseudo}'} {
    @content;
  }
}

@mixin button-plain($color) {
  border-color: mix($--color-white, $color, 60%);
  background-color: mix($--color-white, $color, 90%);
  color: $color;
  &:hover,
  &:focus {
    border-color: $color;
    background-color: $color;
    color: $--color-white;
  }
  &:active {
    border-color: mix($--color-black, $color, $--button-active-shade-percent);
    background-color: mix($--color-black, $color, $--button-active-shade-percent);
    color: $--color-white;
    outline: none;
  }
  &.is-disabled {
    &,
    &:hover,
    &:focus,
    &:active {
      border-color: mix($--color-white, $color, 80%);
      background-color: mix($--color-white, $color, 90%);
      color: mix($--color-white, $color, 40%);
    }
  }
}

@mixin button-variant($border-color, $background-color, $color) {
  border-color: $border-color;
  background-color: $background-color;
  color: $color;
  &:hover,
  &:focus {
    border-color: mix($--color-white, $border-color, $--button-hover-tint-percent);
    background-color: mix($--color-white, $background-color, $--button-hover-tint-percent);
    color: $color;
  }
  &:active {
    border-color: mix($--color-black, $border-color, $--button-active-shade-percent);
    background-color: mix($--color-black, $background-color, $--button-active-shade-percent);
    color: $color;
    outline: none;
  }
  &.is-active {
    border-color: mix($--color-black, $border-color, $--button-active-shade-percent);
    background-color: mix($--color-black, $background-color, $--button-active-shade-percent);
    color: $color;
  }
  &.is-disabled {
    &,
    &:hover,
    &:focus,
    &:active {
      border-color: mix($border-color, $--color-white);
      background-color: mix($background-color, $--color-white);
      color: $--color-white;
    }
  }
  &.is-plain {
    @include button-plain($background-color);
  }
}

@mixin button-size($border-radius, $padding-vertical, $padding-horizontal, $font-size) {
  border-radius: $border-radius;
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  &.is-round {
    padding: $padding-vertical $padding-horizontal;
  }
}
